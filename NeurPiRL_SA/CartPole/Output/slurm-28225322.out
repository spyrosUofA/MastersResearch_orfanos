created virtual environment CPython3.8.10.final.0-64 in 35036ms
  creator CPython3Posix(dest=/localscratch/orfanos.28225322.0/env, clear=False, global=False)
  seeder FromAppData(download=False, pip=latest, setuptools=latest, wheel=latest, via=copy, app_data_dir=/home/orfanos/.local/share/virtualenv/seed-app-data/v1.0.1)
  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pip-21.2.3+computecanada-py3-none-any.whl
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 20.0.2
    Uninstalling pip-20.0.2:
      Successfully uninstalled pip-20.0.2
Successfully installed pip-21.2.3+computecanada
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/box2d_py-2.3.5+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/Pillow-7.2.0+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/bayesian_optimization-1.2.0-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cloudpickle-1.6.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.11.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/future-0.18.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/gym-0.18.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/joblib-1.1.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/kiwisolver-1.3.1+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/matplotlib-3.4.2+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/numpy-1.21.2+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/pandas-1.3.0+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyglet-1.5.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-3.0.6+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.2+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pytz-2021.3+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scikit_learn-1.0.1+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scipy-1.7.1+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.16.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/stable_baselines3-1.2.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/threadpoolctl-3.0.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/torch-1.10.0+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/typing_extensions-4.0.0+computecanada-py3-none-any.whl
Installing collected packages: six, numpy, future, typing-extensions, threadpoolctl, scipy, pytz, python-dateutil, pyparsing, pyglet, Pillow, kiwisolver, joblib, cycler, cloudpickle, torch, scikit-learn, pandas, matplotlib, gym, stable-baselines3, Box2d-py, bayesian-optimization
Successfully installed Box2d-py-2.3.5+computecanada Pillow-7.2.0+computecanada bayesian-optimization-1.2.0 cloudpickle-1.6.0+computecanada cycler-0.11.0+computecanada future-0.18.2+computecanada gym-0.18.0+computecanada joblib-1.1.0+computecanada kiwisolver-1.3.1+computecanada matplotlib-3.4.2+computecanada numpy-1.21.2+computecanada pandas-1.3.0+computecanada pyglet-1.5.0+computecanada pyparsing-3.0.6+computecanada python-dateutil-2.8.2+computecanada pytz-2021.3+computecanada scikit-learn-1.0.1+computecanada scipy-1.7.1+computecanada six-1.16.0+computecanada stable-baselines3-1.2.0+computecanada threadpoolctl-3.0.0+computecanada torch-1.10.0+computecanada typing-extensions-4.0.0+computecanada
500
(if (max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384) < ((obs[3] + -0.041488997648713) + (-0.889837753278921 + obs[0]))) then: (if (obs[0] < max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384)) then: act = 0 else: act = 1) else: act = 1) 9.35
123.13 (if (obs[3] < ((max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384) + max(0, [ 0.036 -0.793  0.973  1.046] *dot* obs[:] + -0.032)) * obs[2])) then: (if (1.917022004702574 < -0.821164504206555) then: act = 0 else: (if (max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384) * obs[1]) < max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384)) then: act = 1 else: act = 1))
500.0 (if (obs[3] < (-2.6136968029704546 * obs[2])) then: (if ((((obs[3] + (max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384) * (obs[1] * max(0, [ 0.036 -0.793  0.973  1.046] *dot* obs[:] + -0.032)))) + max(0, [ 0.036 -0.793  0.973  1.046] *dot* obs[:] + -0.032)) + (((max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384) + (obs[2] + 1.044545044949992)) + max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384)) * max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384))) < -1.6937834724205545) then: act = 1 else: (if ((max(0, [ 0.036 -0.793  0.973  1.046] *dot* obs[:] + -0.032) * (obs[3] * ((obs[3] + max(0, [ 0.036 -0.793  0.973  1.046] *dot* obs[:] + -0.032)) * obs[2]))) < obs[0]) then: act = 0 else: act = 0)) else: (if ((max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384) * obs[1]) < max(0, [0.04  0.712 2.191 1.345] *dot* obs[:] + 0.384)) then: act = 1 else: act = 1))
500
(if (max(0, [ 0.047  0.273 -0.095 -0.113] *dot* obs[:] + 0.016) < ((obs[3] + -0.041488997648713) + (-0.889837753278921 + obs[0]))) then: (if (obs[0] < max(0, [-0.299  0.333 -0.085  0.178] *dot* obs[:] + 0.016)) then: act = 0 else: act = 1) else: act = 1) 9.35
155.92 (if (obs[3] < ((max(0, [ 0.153 -0.056 -0.391 -0.505] *dot* obs[:] + 0.153) + max(0, [ 0.056 -0.207 -0.173 -0.005] *dot* obs[:] + -0.004)) * obs[0])) then: (if ((2.110162246721079 + 0.7500571874086724) < 1.958511002351287) then: act = 0 else: (if (max(0, [-0.24   0.08   0.314  0.211] *dot* obs[:] + 0.105) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [ 0.049 -0.126 -0.407 -0.316] *dot* obs[:] + 0.146) * obs[1]) < max(0, [ 0.008 -0.063 -0.088 -0.316] *dot* obs[:] + 0.105)) then: act = 1 else: act = 1))
355.39 (if (obs[3] < ((-0.5213516377947429 + max(0, [0.121 0.098 0.116 0.416] *dot* obs[:] + 0.135)) * obs[1])) then: (if ((2.4630526871862846 + 0.0636133172189941) < max(0, [-0.24   0.08   0.314  0.211] *dot* obs[:] + 0.105)) then: (if (((0.7397022128326521 * max(0, [0.121 0.098 0.116 0.416] *dot* obs[:] + 0.135)) * max(0, [ 0.052  0.159 -0.257  0.079] *dot* obs[:] + 0.124)) < (((-1.9917922229882892 + obs[2]) * obs[2]) + (obs[0] * (obs[2] * obs[1])))) then: (if (0.8621008322650869 < ((max(0, [-0.176 -0.282 -0.154  0.214] *dot* obs[:] + 0.001) + max(0, [ 0.002 -0.033  0.237 -0.038] *dot* obs[:] + -0.053)) * (max(0, [-0.24   0.08   0.314  0.211] *dot* obs[:] + 0.105) + 1.0935987297177958))) then: (if (max(0, [ 0.126  0.138  0.244 -0.134] *dot* obs[:] + -0.04) < obs[0]) then: act = 1 else: act = 0) else: act = 1) else: (if (0.973938548405303 < 0.0862885844745011) then: act = 0 else: act = 1)) else: (if (max(0, [ 0.043 -0.419 -0.132 -0.12 ] *dot* obs[:] + 0.133) < max(0, [ 0.09  -0.11   0.092 -0.11 ] *dot* obs[:] + -0.054)) then: act = 0 else: act = 0)) else: (if ((max(0, [ 0.049 -0.126 -0.407 -0.316] *dot* obs[:] + 0.146) * obs[1]) < max(0, [ 0.008 -0.063 -0.088 -0.316] *dot* obs[:] + 0.105)) then: act = 1 else: act = 1))
367.23 (if (obs[3] < ((-0.4924647936810619 + max(0, [0.121 0.098 0.116 0.416] *dot* obs[:] + 0.135)) * obs[1])) then: (if ((2.9636649702431117 + -0.6843039828293727) < max(0, [-0.24   0.08   0.314  0.211] *dot* obs[:] + 0.105)) then: (if (((0.4153071857659314 * max(0, [0.121 0.098 0.116 0.416] *dot* obs[:] + 0.135)) * max(0, [-0.122  0.01  -0.065 -0.202] *dot* obs[:] + 0.007)) < (max(0, [0.311 0.195 0.032 0.118] *dot* obs[:] + 0.008) + (obs[0] * (obs[2] * obs[1])))) then: (if (0.7232208083963438 < (1.992596978187247 * (max(0, [-0.24   0.08   0.314  0.211] *dot* obs[:] + 0.105) + 0.7676657188565378))) then: (if ((max(0, [ 0.008 -0.063 -0.088 -0.316] *dot* obs[:] + 0.105) * max(0, [-0.165 -0.039 -0.2   -0.027] *dot* obs[:] + -0.007)) < obs[0]) then: act = 1 else: act = 0) else: act = 1) else: (if (1.0724661217705138 < 0.13510372793386355) then: act = 0 else: act = 1)) else: (if (max(0, [ 0.043 -0.419 -0.132 -0.12 ] *dot* obs[:] + 0.133) < max(0, [ 0.09  -0.11   0.092 -0.11 ] *dot* obs[:] + -0.054)) then: act = 0 else: act = 0)) else: (if ((max(0, [ 0.049 -0.126 -0.407 -0.316] *dot* obs[:] + 0.146) * obs[1]) < max(0, [ 0.008 -0.063 -0.088 -0.316] *dot* obs[:] + 0.105)) then: act = 1 else: act = 1))
401.67 (if (obs[3] < ((-0.4393000628543967 + max(0, [0.121 0.098 0.116 0.416] *dot* obs[:] + 0.135)) * obs[1])) then: (if ((2.9980906887863523 + -0.7756227781682923) < max(0, [-0.24   0.08   0.314  0.211] *dot* obs[:] + 0.105)) then: (if (((0.4407812953248798 * max(0, [0.121 0.098 0.116 0.416] *dot* obs[:] + 0.135)) * max(0, [-0.122  0.01  -0.065 -0.202] *dot* obs[:] + 0.007)) < (max(0, [0.311 0.195 0.032 0.118] *dot* obs[:] + 0.008) + (obs[0] * (obs[2] * obs[1])))) then: (if (0.9675288856025683 < ((obs[2] + obs[1]) * (((obs[0] * (obs[1] * max(0, [-0.1    0.04  -0.056 -0.251] *dot* obs[:] + 0.064))) + max(0, [ 0.191 -0.055 -0.047  0.274] *dot* obs[:] + 0.094)) * (max(0, [ 0.047  0.273 -0.095 -0.113] *dot* obs[:] + 0.016) + obs[1])))) then: (if ((max(0, [ 0.008 -0.063 -0.088 -0.316] *dot* obs[:] + 0.105) * max(0, [-0.165 -0.039 -0.2   -0.027] *dot* obs[:] + -0.007)) < obs[0]) then: act = 1 else: act = 0) else: act = 1) else: (if (1.1123387313934123 < 0.07517431424563875) then: act = 0 else: act = 1)) else: (if (max(0, [ 0.043 -0.419 -0.132 -0.12 ] *dot* obs[:] + 0.133) < max(0, [ 0.09  -0.11   0.092 -0.11 ] *dot* obs[:] + -0.054)) then: act = 0 else: act = 0)) else: (if ((max(0, [ 0.049 -0.126 -0.407 -0.316] *dot* obs[:] + 0.146) * obs[1]) < max(0, [ 0.008 -0.063 -0.088 -0.316] *dot* obs[:] + 0.105)) then: act = 1 else: act = 1))
414.53 (if (obs[3] < ((-0.9706648709283281 + (-2.588696157302402 + (-2.2639369839071004 * (-1.4474293768680486 + ((max(0, [-0.11   0.293  0.323  0.149] *dot* obs[:] + 0.122) * obs[3]) * max(0, [0.059 0.201 0.083 0.173] *dot* obs[:] + 0.032)))))) * obs[1])) then: act = 0 else: (if ((-1.8038961858407054 * -1.669888108410029) < obs[1]) then: act = 1 else: act = 1))
463.76 (if (obs[3] < ((-0.7174844112592342 + ((-1.1531545703744928 + -1.1349759015011842) + (-2.203830702615601 * (-1.2329239330151571 + ((obs[2] + obs[2]) * max(0, [0.059 0.201 0.083 0.173] *dot* obs[:] + 0.032)))))) * obs[1])) then: act = 0 else: (if ((-2.3863260356920715 * -1.2734101120591497) < obs[1]) then: act = 1 else: act = 1))
465.75 (if (obs[3] < ((-0.7174844112592342 + ((-1.1531545703744928 + -1.1349759015011842) + (-2.203830702615601 * (-1.2329239330151571 + ((obs[2] + obs[2]) * max(0, [0.059 0.201 0.083 0.173] *dot* obs[:] + 0.032)))))) * obs[1])) then: act = 0 else: (if ((-2.3863260356920715 * -1.2734101120591497) < obs[1]) then: act = 1 else: act = 1))
469.47 (if (obs[3] < ((-0.7174844112592342 + ((-1.1531545703744928 + -1.1349759015011842) + (-2.203830702615601 * (-1.2329239330151571 + ((obs[2] + obs[2]) * max(0, [0.059 0.201 0.083 0.173] *dot* obs[:] + 0.032)))))) * obs[1])) then: act = 0 else: (if ((-2.3863260356920715 * -1.2734101120591497) < obs[1]) then: act = 1 else: act = 1))
488.07 (if (obs[3] < ((-1.137702252803144 + (((1.0270106901787002 * (obs[3] * obs[2])) + -0.7854895212483031) + (-1.1144203683875784 * (-1.4827920652036586 + ((max(0, [-0.    -0.134  0.143  0.352] *dot* obs[:] + 0.046) + obs[2]) * max(0, [ 0.238  0.288 -0.107  0.024] *dot* obs[:] + 0.115)))))) * obs[1])) then: act = 0 else: (if ((-2.2752940768395726 * -2.424436110524779) < obs[1]) then: act = 1 else: act = 1))
488.14 (if (obs[3] < ((-1.137702252803144 + (((1.0270106901787002 * (obs[3] * obs[2])) + -0.7854895212483031) + (-1.1144203683875784 * (-1.4827920652036586 + ((max(0, [-0.    -0.134  0.143  0.352] *dot* obs[:] + 0.046) + obs[2]) * max(0, [ 0.238  0.288 -0.107  0.024] *dot* obs[:] + 0.115)))))) * obs[1])) then: act = 0 else: (if ((-2.2752940768395726 * -2.424436110524779) < obs[1]) then: act = 1 else: act = 1))
490.86 (if (obs[3] < ((-1.137702252803144 + (((1.0270106901787002 * (obs[3] * obs[2])) + -0.7854895212483031) + (-1.1144203683875784 * (-1.4827920652036586 + ((max(0, [-0.    -0.134  0.143  0.352] *dot* obs[:] + 0.046) + obs[2]) * max(0, [ 0.238  0.288 -0.107  0.024] *dot* obs[:] + 0.115)))))) * obs[1])) then: act = 0 else: (if ((-2.2752940768395726 * -2.424436110524779) < obs[1]) then: act = 1 else: act = 1))
499.37 (if (obs[3] < ((-0.9137171471943035 + (((1.8154984224054584 * (obs[3] * obs[2])) + -0.9473913934607754) + (-1.19838858120416 * (-1.3280467191403675 + ((max(0, [-0.    -0.134  0.143  0.352] *dot* obs[:] + 0.046) + obs[2]) * max(0, [ 0.238  0.288 -0.107  0.024] *dot* obs[:] + 0.115)))))) * obs[1])) then: act = 0 else: (if ((-2.1117363412542063 * -2.666926620153718) < obs[1]) then: act = 1 else: act = 1))
500
(if ((-1.041488997648713 + (obs[3] * -0.24994281259132756)) < (-0.889837753278921 * (-1.0988337136840802 * obs[1]))) then: act = 1 else: act = 0) 9.35
287.84 (if ((obs[0] * (obs[2] * -1.7826014434377742)) < (obs[3] * -0.06273483081346237)) then: act = 0 else: (if (obs[1] < 0.8121661365612176) then: act = 1 else: (if (1.96607905892896 < 0.22845070732109507) then: (if ((obs[2] * -0.6361918613822116) < 2.117532981644335) then: (if (0.41781346361163363 < ((obs[0] * (-2.30020427708535 + obs[1])) * obs[1])) then: act = 0 else: (if (0.1712045183655187 < ((((1.6229686168860529 + obs[3]) + obs[0]) + (-0.6999420834031949 + -1.8408673615460178)) + obs[1])) then: act = 1 else: act = 1)) else: act = 0) else: (if (0.6228743970071726 < obs[2]) then: act = 1 else: (if (obs[3] < obs[0]) then: act = 1 else: (if (obs[1] < obs[0]) then: act = 0 else: act = 0))))))
440.88 (if ((obs[2] * (((((obs[2] * obs[0]) + (obs[0] * obs[2])) + (obs[2] + (((0.5621149988672038 + (1.9203254848294287 * obs[2])) + obs[2]) + ((obs[2] * 1.4735778557332795) + (0.4903578754405088 + 0.6411147723567915))))) + obs[3]) + obs[1])) < (obs[3] * -2.686111717210099)) then: act = 0 else: act = 1)
460.14 (if ((obs[2] * ((((obs[2] + obs[0]) + ((0.5646463363967921 + obs[3]) + ((2.550342521388774 + obs[2]) + ((1.5 + (((2.5 * 2.5) * obs[1]) * obs[1])) * (obs[0] * -1.5))))) + obs[3]) + obs[1])) < (obs[3] * -4.096139977207344)) then: act = 0 else: act = 1)
488.25 (if ((obs[2] * ((((obs[2] + obs[0]) + (2.0361727202693594 + ((1.4943646934144745 + obs[2]) + ((1.3934756867985565 + (((2.8191347759278993 * 2.743286710017608) * -0.5) * obs[1])) * (obs[0] * -1.8985557086615796))))) + obs[3]) + obs[1])) < (obs[3] * -3.546410354685332)) then: act = 0 else: act = 1)
490.23 (if ((obs[2] * ((((obs[2] + obs[0]) + (2.0361727202693594 + ((1.4943646934144745 + obs[2]) + ((1.3934756867985565 + (((2.8191347759278993 * 2.743286710017608) * -0.5) * obs[1])) * (obs[0] * -1.8985557086615796))))) + obs[3]) + obs[1])) < (obs[3] * -3.546410354685332)) then: act = 0 else: act = 1)
