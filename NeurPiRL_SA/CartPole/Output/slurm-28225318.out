created virtual environment CPython3.8.10.final.0-64 in 27501ms
  creator CPython3Posix(dest=/localscratch/orfanos.28225318.0/env, clear=False, global=False)
  seeder FromAppData(download=False, pip=latest, setuptools=latest, wheel=latest, via=copy, app_data_dir=/home/orfanos/.local/share/virtualenv/seed-app-data/v1.0.1)
  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator
Ignoring pip: markers 'python_version < "3"' don't match your environment
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pip-21.2.3+computecanada-py3-none-any.whl
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 20.0.2
    Uninstalling pip-20.0.2:
      Successfully uninstalled pip-20.0.2
Successfully installed pip-21.2.3+computecanada
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/box2d_py-2.3.5+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/Pillow-7.2.0+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/bayesian_optimization-1.2.0-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cloudpickle-1.6.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.11.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/future-0.18.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/gym-0.18.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/joblib-1.1.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/kiwisolver-1.3.1+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/matplotlib-3.4.2+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/numpy-1.21.2+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/pandas-1.3.0+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyglet-1.5.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-3.0.6+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.2+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pytz-2021.3+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scikit_learn-1.0.1+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scipy-1.7.1+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.16.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/stable_baselines3-1.2.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/threadpoolctl-3.0.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/torch-1.10.0+computecanada-cp38-cp38-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/typing_extensions-4.0.0+computecanada-py3-none-any.whl
Installing collected packages: six, numpy, future, typing-extensions, threadpoolctl, scipy, pytz, python-dateutil, pyparsing, pyglet, Pillow, kiwisolver, joblib, cycler, cloudpickle, torch, scikit-learn, pandas, matplotlib, gym, stable-baselines3, Box2d-py, bayesian-optimization
Successfully installed Box2d-py-2.3.5+computecanada Pillow-7.2.0+computecanada bayesian-optimization-1.2.0 cloudpickle-1.6.0+computecanada cycler-0.11.0+computecanada future-0.18.2+computecanada gym-0.18.0+computecanada joblib-1.1.0+computecanada kiwisolver-1.3.1+computecanada matplotlib-3.4.2+computecanada numpy-1.21.2+computecanada pandas-1.3.0+computecanada pyglet-1.5.0+computecanada pyparsing-3.0.6+computecanada python-dateutil-2.8.2+computecanada pytz-2021.3+computecanada scikit-learn-1.0.1+computecanada scipy-1.7.1+computecanada six-1.16.0+computecanada stable-baselines3-1.2.0+computecanada threadpoolctl-3.0.0+computecanada torch-1.10.0+computecanada typing-extensions-4.0.0+computecanada
500
(if (max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) < ((obs[3] + -0.041488997648713) + (-0.889837753278921 + obs[0]))) then: (if (obs[0] < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 0 else: act = 1) else: act = 1) 9.35
128.21 (if (obs[3] < ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) + max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416)) * obs[0])) then: (if ((2.110162246721079 + 0.7500571874086724) < 1.958511002351287) then: act = 0 else: (if (max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) * obs[1]) < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 1 else: act = 1))
161.74 (if (obs[3] < ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) * obs[0])) then: (if ((2.220324493442158 + 0.5001143748173449) < 1.917022004702574) then: act = 0 else: (if (max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) * obs[1]) < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 1 else: act = 1))
303.64 (if (obs[3] < ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) * obs[0])) then: (if (0.5395406021654088 < ((-2.1333407562569584 * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) * (-2.067209924015332 + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) + -0.9959157027377721)) then: act = 1 else: (if (((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) + (0.30411157534071015 + (-0.285211478747922 + max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416)))) + ((-2.395186598799205 + (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) * 2.274966383586143)) * (obs[1] + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) < (-0.43085730940018874 * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) * ((max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) + max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416)) * (obs[1] + max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416)))))) then: act = 0 else: act = 0)) else: (if ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) * obs[1]) < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 1 else: act = 1))
494.47 (if (-0.5040836251847298 < 2.1586701145628093) then: (if (0.4796215433951092 < ((-3.3373274255761025 * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) * (-2.0060142622860537 + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) + -1.853281736577895)) then: act = 1 else: (if (obs[0] < (((obs[3] * (obs[3] + max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416))) + obs[2]) * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) then: act = 0 else: act = 0)) else: (if ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) * obs[1]) < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 1 else: act = 1))
495.02 (if (-0.5040836251847298 < 2.1586701145628093) then: (if (0.4796215433951092 < ((-3.3373274255761025 * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) * (-2.0060142622860537 + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) + -1.853281736577895)) then: act = 1 else: (if (obs[0] < (((obs[3] * (obs[3] + max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416))) + obs[2]) * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) then: act = 0 else: act = 0)) else: (if ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) * obs[1]) < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 1 else: act = 1))
496.53 (if (-1.4737928412719834 < 2.3289423348597933) then: (if (2.090819553610143 < ((-4.2462360911121975 * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) * (-2.3379398616238007 + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) + -1.4267970928831755)) then: act = 1 else: (if (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) < ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) * (0.4170375891871372 + obs[3]))) then: act = 0 else: act = 0)) else: (if ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) * obs[1]) < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 1 else: act = 1))
497.34 (if (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) < 3.8139739502593932) then: (if (1.2998573791117507 < ((-4.618593630945813 * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) * (-2.252606759553746 + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) + -2.359949914964846)) then: act = 1 else: (if (((-2.2582701059201478 + -0.2007859462240863) + obs[0]) < 0.12045377421298015) then: act = 0 else: act = 0)) else: (if ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) * obs[1]) < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 1 else: act = 1))
498.78 (if (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) < 3.8139739502593932) then: (if (1.2998573791117507 < ((-4.618593630945813 * (max(0, [-0.401  0.673  1.347  1.352] *dot* obs[:] + 0.416) * (-2.252606759553746 + max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)))) + -2.359949914964846)) then: act = 1 else: (if (((-2.2582701059201478 + -0.2007859462240863) + obs[0]) < 0.12045377421298015) then: act = 0 else: act = 0)) else: (if ((max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326) * obs[1]) < max(0, [-1.162 -1.195  0.202 -0.048] *dot* obs[:] + 0.326)) then: act = 1 else: act = 1))
500
(if (max(0, [ 0.012 -0.169  0.061  0.187] *dot* obs[:] + 0.031) < ((obs[3] + -0.041488997648713) + (-0.889837753278921 + obs[0]))) then: (if (obs[0] < max(0, [ 0.029 -0.127  0.221  0.266] *dot* obs[:] + 0.078)) then: act = 0 else: act = 1) else: act = 1) 9.35
171.46 (if (obs[3] < ((max(0, [-0.068 -0.085  0.039  0.053] *dot* obs[:] + 0.008) + max(0, [-0.251 -0.05  -0.126  0.357] *dot* obs[:] + 0.074)) * obs[0])) then: (if ((2.110162246721079 + 0.7500571874086724) < 1.958511002351287) then: act = 0 else: (if (max(0, [ 0.318 -0.254 -0.148 -0.318] *dot* obs[:] + 0.134) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [-0.038 -0.117  0.138  0.33 ] *dot* obs[:] + 0.064) * obs[1]) < max(0, [-0.084 -0.155  0.156 -0.215] *dot* obs[:] + 0.022)) then: act = 1 else: act = 1))
173.94 (if (obs[3] < ((max(0, [-0.068 -0.085  0.039  0.053] *dot* obs[:] + 0.008) + max(0, [-0.251 -0.05  -0.126  0.357] *dot* obs[:] + 0.074)) * obs[0])) then: (if ((2.110162246721079 + 0.7500571874086724) < 1.958511002351287) then: act = 0 else: (if (max(0, [ 0.318 -0.254 -0.148 -0.318] *dot* obs[:] + 0.134) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [-0.038 -0.117  0.138  0.33 ] *dot* obs[:] + 0.064) * obs[1]) < max(0, [-0.084 -0.155  0.156 -0.215] *dot* obs[:] + 0.022)) then: act = 1 else: act = 1))
487.99 (if (obs[3] < (((max(0, [ 0.158  0.079 -0.182 -0.328] *dot* obs[:] + 0.082) * (obs[3] + -1.6457708300115104)) + ((2.15641852852166 + max(0, [-0.07   0.186 -0.142  0.066] *dot* obs[:] + -0.071)) * -0.4475527125360432)) * obs[2])) then: (if (max(0, [ 0.244 -0.002  0.198  0.424] *dot* obs[:] + 0.096) < -2.857102380332078) then: (if (obs[1] < obs[1]) then: act = 0 else: act = 1) else: (if (max(0, [ 0.318 -0.254 -0.148 -0.318] *dot* obs[:] + 0.134) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [-0.038 -0.117  0.138  0.33 ] *dot* obs[:] + 0.064) * obs[1]) < max(0, [-0.084 -0.155  0.156 -0.215] *dot* obs[:] + 0.022)) then: act = 1 else: act = 1))
494.99 (if (obs[3] < (((max(0, [ 0.158  0.079 -0.182 -0.328] *dot* obs[:] + 0.082) * (obs[3] + -1.6028911942823665)) + ((2.3912164026814975 + max(0, [-0.07   0.186 -0.142  0.066] *dot* obs[:] + -0.071)) * -0.5579608730304735)) * obs[2])) then: (if (max(0, [ 0.244 -0.002  0.198  0.424] *dot* obs[:] + 0.096) < -3.0450157227721224) then: (if (obs[3] < obs[1]) then: act = 0 else: act = 1) else: (if (max(0, [ 0.318 -0.254 -0.148 -0.318] *dot* obs[:] + 0.134) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [-0.038 -0.117  0.138  0.33 ] *dot* obs[:] + 0.064) * obs[1]) < max(0, [-0.084 -0.155  0.156 -0.215] *dot* obs[:] + 0.022)) then: act = 1 else: act = 1))
497.27 (if (obs[3] < (((max(0, [ 0.158  0.079 -0.182 -0.328] *dot* obs[:] + 0.082) * (obs[3] + -1.6028911942823665)) + ((2.3912164026814975 + max(0, [-0.07   0.186 -0.142  0.066] *dot* obs[:] + -0.071)) * -0.5579608730304735)) * obs[2])) then: (if (max(0, [ 0.244 -0.002  0.198  0.424] *dot* obs[:] + 0.096) < -3.0450157227721224) then: (if (obs[3] < obs[1]) then: act = 0 else: act = 1) else: (if (max(0, [ 0.318 -0.254 -0.148 -0.318] *dot* obs[:] + 0.134) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [-0.038 -0.117  0.138  0.33 ] *dot* obs[:] + 0.064) * obs[1]) < max(0, [-0.084 -0.155  0.156 -0.215] *dot* obs[:] + 0.022)) then: act = 1 else: act = 1))
500.0 (if (obs[3] < ((((-1.1879689362617936 + obs[0]) * (obs[3] + max(0, [ 0.17  -0.292  0.132  0.392] *dot* obs[:] + 0.066))) + (((1.7343613746444555 + max(0, [0.071 0.2   0.126 0.109] *dot* obs[:] + 0.007)) + ((0.5514873410481482 * max(0, [ 0.166  0.197 -0.22  -0.085] *dot* obs[:] + 0.05)) * 1.413138352230059)) * -1.056808799888555)) * obs[2])) then: (if (1.4721048284471348 < 0.7249397019099639) then: act = 1 else: (if (max(0, [ 0.318 -0.254 -0.148 -0.318] *dot* obs[:] + 0.134) < obs[2]) then: act = 0 else: act = 0)) else: (if ((max(0, [-0.038 -0.117  0.138  0.33 ] *dot* obs[:] + 0.064) * obs[1]) < max(0, [-0.084 -0.155  0.156 -0.215] *dot* obs[:] + 0.022)) then: act = 1 else: act = 1))
500
(if ((-1.041488997648713 + (obs[3] * -0.24994281259132756)) < (-0.889837753278921 * (-1.0988337136840802 * obs[1]))) then: act = 1 else: act = 0) 9.35
69.49 (if (-1.9116206150800132 < ((obs[1] * (((-1.3774241364918751 * obs[3]) * obs[0]) + -2.4341115462815384)) + (obs[1] + (((obs[3] + obs[0]) + -1.9044946448333289) + (obs[1] * (obs[1] + -1.1303044880366069)))))) then: (if (obs[0] < 2.326251175153371) then: act = 1 else: act = 0) else: (if (((((-1.6401861274037703 * obs[1]) * (obs[0] + obs[0])) + 1.6308193347779592) * obs[1]) < obs[2]) then: act = 1 else: act = 0))
73.68 (if (-2.2047855715283133 < ((obs[1] * ((-0.2038307026156011 * (obs[2] + ((((obs[3] * obs[3]) + obs[3]) + (-0.779675506557842 * obs[1])) * -0.09866328708960076))) + -2.4442981511717496)) + (obs[1] + (((obs[3] + obs[0]) + -2.2304480353874068) + (obs[1] * (obs[1] + -1.3013037496119058)))))) then: (if (obs[0] < 1.982294898830986) then: act = 1 else: act = 0) else: (if (((((-1.820832627595493 * obs[1]) * (obs[0] + obs[0])) + 1.371781851788044) * obs[1]) < obs[2]) then: act = 1 else: act = 0))
74.2 (if (-1.9620136726642616 < ((obs[1] * ((-1.0711853282860326 * (obs[2] + ((((obs[3] * obs[3]) + obs[0]) + obs[1]) * -0.08143930569113084))) + -2.2695593431533654)) + (obs[2] + (((obs[1] + obs[0]) + -1.5387028328912287) + (obs[1] * (obs[3] + -1.335334260019044)))))) then: (if (obs[1] < obs[3]) then: act = 1 else: act = 0) else: (if (((((-1.5939154054339657 * obs[1]) * (obs[0] + obs[0])) + 1.2778403897122406) * obs[1]) < obs[2]) then: act = 1 else: act = 0))
76.06 (if (-1.9556331869303667 < ((obs[1] * ((((obs[1] + obs[1]) + obs[1]) * -1.196399465869672) * (obs[0] + (obs[1] + obs[3])))) + (obs[2] + (((obs[1] + obs[0]) + -1.2303149627549872) + (obs[1] * ((obs[1] + -1.6665788970965267) * ((obs[2] * -0.8074367385730015) + 2.025892674808799))))))) then: (if (obs[1] < obs[3]) then: act = 1 else: act = 0) else: (if (((((-1.7866941061681374 * obs[1]) * (obs[0] + obs[0])) + 1.0628181635808807) * obs[1]) < obs[2]) then: act = 1 else: act = 0))
76.81 (if (((0.9227803635215239 + -0.05161626288466503) * ((obs[1] * (-1.0404027427983527 * obs[0])) * obs[2])) < ((((((obs[0] + -0.3450351506426251) + (2.2352280155798714 * 1.3262042197948305)) + ((0.7057229737641268 + (((0.6511662863159199 + ((-1.9538307026156012 * -1.9160839588114191) * -2.3781836718430567)) * 2.0000571874086726) * obs[1])) * 0.6449423228302196)) + obs[0]) + (-2.2304772581809766 * obs[3])) * 0.38943328734785293)) then: (if (obs[1] < obs[3]) then: act = 1 else: act = 0) else: act = 1)
156.72 (if (((0.8886890763511714 + 1.6655476720967162) * (0.25 * obs[2])) < (((obs[0] + obs[0]) + (-2.4750629167265057 * obs[3])) * 0.23895140001055432)) then: (if (obs[1] < obs[3]) then: act = 1 else: act = 0) else: act = 1)
181.39 (if (((0.5285531009470804 + 0.2774750826697655) * obs[3]) < (obs[2] * (((obs[1] * -0.9906842991018867) * ((1.1250721574724838 * 1.2444305444532473) + ((0.1240828271899197 * ((obs[0] + obs[3]) + 1.8902219960322026)) * (obs[2] + (obs[2] + (0.14463966422574426 + 0.801613003288821)))))) + obs[3]))) then: (if (obs[1] < obs[3]) then: act = 1 else: act = 0) else: act = 1)
192.89 (if (((0.5285531009470804 + 0.2774750826697655) * obs[3]) < (obs[2] * (((obs[1] * -0.9906842991018867) * ((1.1250721574724838 * 1.2444305444532473) + ((0.1240828271899197 * ((obs[0] + obs[3]) + 1.8902219960322026)) * (obs[2] + (obs[2] + (0.14463966422574426 + 0.801613003288821)))))) + obs[3]))) then: (if (obs[1] < obs[3]) then: act = 1 else: act = 0) else: act = 1)
256.82 (if (obs[3] < ((((-1.3988041768946395 * 0.5896936254786227) * obs[2]) + (0.3878277226410308 * ((((0.9747523649311072 * (-0.1719434569437377 + -1.0729933138586722)) * -0.9655710046476422) * obs[2]) * obs[2]))) + (obs[0] * -0.03984975666545504))) then: (if (obs[1] < obs[3]) then: act = 1 else: act = 0) else: act = 1)
462.21 (if (obs[3] < ((((-1.552112357703646 * obs[3]) + (-0.25 * (obs[1] + ((obs[3] + -0.4856769414202604) + obs[0])))) + ((obs[0] + -1.1909016131902128) + (obs[0] + ((obs[0] + 0.9120362467723686) * (obs[1] * -0.6638297458273357))))) * obs[2])) then: act = 0 else: act = 1)
462.68 (if (obs[3] < (obs[1] * (0.12730955544747094 * -1.0826871640513136))) then: act = 0 else: act = 1)
468.38 (if (obs[3] < (obs[1] * (0.24154415167637433 * -0.5826871640513136))) then: act = 0 else: act = 1)
497.12 (if (obs[3] < (((obs[1] * (-2.7879110700281435 + ((-0.8137331171369637 + -1.9204379402513292) + (((-0.22737947022499228 * -1.9292011148922257) * (obs[2] + obs[3])) * -1.9439475727945528)))) + obs[0]) * (-0.15487043229412184 * -0.24931531052322736))) then: act = 0 else: act = 1)
499.38 (if (obs[3] < (((obs[1] * (-2.7879110700281435 + ((-0.8137331171369637 + -1.9204379402513292) + (((-0.22737947022499228 * -1.9292011148922257) * (obs[2] + obs[3])) * -1.9439475727945528)))) + obs[0]) * (-0.15487043229412184 * -0.24931531052322736))) then: act = 0 else: act = 1)
500.0 (if (obs[3] < (((obs[1] * (-2.6021716125717504 + ((-0.8921555728613417 + -1.8573987058397567) + (((-0.180300298769703 * -1.6673827202377165) * (obs[2] + obs[3])) * -2.056714138247783)))) + obs[0]) * (-0.2742725747085919 * -0.13049603075783328))) then: act = 0 else: act = 1)
